const express = require('express');
const path = require('path');
const xss = require('xss');
const Services = require('./childService');
const bcrypt = require('bcrypt');
const jwtGenerator = require('../../utilities/jwtGenerator');
const jsonParser = express.json();
const childRouter = express.Router();
const authorization = require('../../utilities/authorization');

child_id  int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
 family_id int NOT NULL,
 full_name text NOT NULL,
 username  text NOT NULL,
 user_type text NOT NULL,
 password  text NOT NULL,
 age       int NOT NULL,
 gender    text NOT NULL,
 tokens    int NOT NULL,

//Create Child
// Request body - must get family_id from local storage token and add to the request body before sending request. Also,send token value of 0

childRouter
.post('/register', jsonParser, async (req, res, next) => {
    
    const { full_name, username, user_type, family_id, age, gender, tokens, password} = req.body;
    const newUser = {full_name, username, user_type, family_id, age, gender, tokens, password};
    const users = await Services.checkForUser(req.app.get('db'), newUser.username)
        if (users) {
            return res.status(400).json({error: 'username not available'});
        } 
  const saltRound = 2
  const salt = await bcrypt.genSalt(saltRound)
  const bcryptPassword = await bcrypt.hash(password, salt)
  const addUser = await Services.insertChildUser(req.app.get('db'), newUser.full_name, newUser.username, newUser.user_type, newUser.family_id, newUser.age, newUser.gender, newUser.tokens, bcryptPassword); 
  console.log(addUser)    
  res.status(200).json({message: `${newUser.full_name} has been added.`})     
  .catch(next);
});


module.exports = childRouter;